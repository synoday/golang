// Code generated by protoc-gen-go.
// source: task/task.proto
// DO NOT EDIT!

/*
Package task is a generated protocol buffer package.

It is generated from these files:
	task/task.proto

It has these top-level messages:
	Task
	TodayTasksRequest
	TodayTasksResponse
	AddRequest
	AddResponse
	RemoveRequest
	RemoveResponse
*/
package task

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ResponseStatus is response status enum.
type ResponseStatus int32

const (
	ResponseStatus_UNKNOWN                ResponseStatus = 0
	ResponseStatus_SUCCESS                ResponseStatus = 1
	ResponseStatus_INTERNAL_ERROR         ResponseStatus = 2
	ResponseStatus_TASK_INVALID_TASK_NAME ResponseStatus = 16
	ResponseStatus_TASK_NOT_FOUND         ResponseStatus = 17
)

var ResponseStatus_name = map[int32]string{
	0:  "UNKNOWN",
	1:  "SUCCESS",
	2:  "INTERNAL_ERROR",
	16: "TASK_INVALID_TASK_NAME",
	17: "TASK_NOT_FOUND",
}
var ResponseStatus_value = map[string]int32{
	"UNKNOWN":                0,
	"SUCCESS":                1,
	"INTERNAL_ERROR":         2,
	"TASK_INVALID_TASK_NAME": 16,
	"TASK_NOT_FOUND":         17,
}

func (x ResponseStatus) String() string {
	return proto.EnumName(ResponseStatus_name, int32(x))
}
func (ResponseStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// Task holds task information.
type Task struct {
	Id        string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	TaskName  string `protobuf:"bytes,2,opt,name=task_name,json=taskName" json:"task_name,omitempty"`
	Url       string `protobuf:"bytes,3,opt,name=url" json:"url,omitempty"`
	Tags      string `protobuf:"bytes,4,opt,name=tags" json:"tags,omitempty"`
	Notes     string `protobuf:"bytes,5,opt,name=notes" json:"notes,omitempty"`
	NotesMd   string `protobuf:"bytes,6,opt,name=notes_md,json=notesMd" json:"notes_md,omitempty"`
	Date      string `protobuf:"bytes,7,opt,name=date" json:"date,omitempty"`
	Completed bool   `protobuf:"varint,8,opt,name=completed" json:"completed,omitempty"`
}

func (m *Task) Reset()                    { *m = Task{} }
func (m *Task) String() string            { return proto.CompactTextString(m) }
func (*Task) ProtoMessage()               {}
func (*Task) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Task) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Task) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *Task) GetUrl() string {
	if m != nil {
		return m.Url
	}
	return ""
}

func (m *Task) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

func (m *Task) GetNotes() string {
	if m != nil {
		return m.Notes
	}
	return ""
}

func (m *Task) GetNotesMd() string {
	if m != nil {
		return m.NotesMd
	}
	return ""
}

func (m *Task) GetDate() string {
	if m != nil {
		return m.Date
	}
	return ""
}

func (m *Task) GetCompleted() bool {
	if m != nil {
		return m.Completed
	}
	return false
}

// TodayTasksRequest holds information which can be used
// to filter today task list.
type TodayTasksRequest struct {
	TaskName string `protobuf:"bytes,1,opt,name=task_name,json=taskName" json:"task_name,omitempty"`
	Tags     string `protobuf:"bytes,2,opt,name=tags" json:"tags,omitempty"`
}

func (m *TodayTasksRequest) Reset()                    { *m = TodayTasksRequest{} }
func (m *TodayTasksRequest) String() string            { return proto.CompactTextString(m) }
func (*TodayTasksRequest) ProtoMessage()               {}
func (*TodayTasksRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *TodayTasksRequest) GetTaskName() string {
	if m != nil {
		return m.TaskName
	}
	return ""
}

func (m *TodayTasksRequest) GetTags() string {
	if m != nil {
		return m.Tags
	}
	return ""
}

// TodayTasksResponse holds today task list.
type TodayTasksResponse struct {
	Tasks  []*Task        `protobuf:"bytes,1,rep,name=tasks" json:"tasks,omitempty"`
	Status ResponseStatus `protobuf:"varint,2,opt,name=status,enum=kudu.task.ResponseStatus" json:"status,omitempty"`
}

func (m *TodayTasksResponse) Reset()                    { *m = TodayTasksResponse{} }
func (m *TodayTasksResponse) String() string            { return proto.CompactTextString(m) }
func (*TodayTasksResponse) ProtoMessage()               {}
func (*TodayTasksResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TodayTasksResponse) GetTasks() []*Task {
	if m != nil {
		return m.Tasks
	}
	return nil
}

func (m *TodayTasksResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_UNKNOWN
}

// AddRequest holds information of task which is going to be added.
type AddRequest struct {
	Task *Task `protobuf:"bytes,1,opt,name=task" json:"task,omitempty"`
}

func (m *AddRequest) Reset()                    { *m = AddRequest{} }
func (m *AddRequest) String() string            { return proto.CompactTextString(m) }
func (*AddRequest) ProtoMessage()               {}
func (*AddRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AddRequest) GetTask() *Task {
	if m != nil {
		return m.Task
	}
	return nil
}

// AddResponse holds newly added task id.
type AddResponse struct {
	Id     string         `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
	Status ResponseStatus `protobuf:"varint,2,opt,name=status,enum=kudu.task.ResponseStatus" json:"status,omitempty"`
}

func (m *AddResponse) Reset()                    { *m = AddResponse{} }
func (m *AddResponse) String() string            { return proto.CompactTextString(m) }
func (*AddResponse) ProtoMessage()               {}
func (*AddResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AddResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *AddResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_UNKNOWN
}

// RemoveRequest holds task id which is going to be deleted.
type RemoveRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *RemoveRequest) Reset()                    { *m = RemoveRequest{} }
func (m *RemoveRequest) String() string            { return proto.CompactTextString(m) }
func (*RemoveRequest) ProtoMessage()               {}
func (*RemoveRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RemoveRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// RemoveResponse holds remove task response status.
type RemoveResponse struct {
	Status ResponseStatus `protobuf:"varint,1,opt,name=status,enum=kudu.task.ResponseStatus" json:"status,omitempty"`
}

func (m *RemoveResponse) Reset()                    { *m = RemoveResponse{} }
func (m *RemoveResponse) String() string            { return proto.CompactTextString(m) }
func (*RemoveResponse) ProtoMessage()               {}
func (*RemoveResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RemoveResponse) GetStatus() ResponseStatus {
	if m != nil {
		return m.Status
	}
	return ResponseStatus_UNKNOWN
}

func init() {
	proto.RegisterType((*Task)(nil), "kudu.task.Task")
	proto.RegisterType((*TodayTasksRequest)(nil), "kudu.task.TodayTasksRequest")
	proto.RegisterType((*TodayTasksResponse)(nil), "kudu.task.TodayTasksResponse")
	proto.RegisterType((*AddRequest)(nil), "kudu.task.AddRequest")
	proto.RegisterType((*AddResponse)(nil), "kudu.task.AddResponse")
	proto.RegisterType((*RemoveRequest)(nil), "kudu.task.RemoveRequest")
	proto.RegisterType((*RemoveResponse)(nil), "kudu.task.RemoveResponse")
	proto.RegisterEnum("kudu.task.ResponseStatus", ResponseStatus_name, ResponseStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TaskService service

type TaskServiceClient interface {
	TodayTasks(ctx context.Context, in *TodayTasksRequest, opts ...grpc.CallOption) (*TodayTasksResponse, error)
	AddTask(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error)
	RemoveTask(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error)
}

type taskServiceClient struct {
	cc *grpc.ClientConn
}

func NewTaskServiceClient(cc *grpc.ClientConn) TaskServiceClient {
	return &taskServiceClient{cc}
}

func (c *taskServiceClient) TodayTasks(ctx context.Context, in *TodayTasksRequest, opts ...grpc.CallOption) (*TodayTasksResponse, error) {
	out := new(TodayTasksResponse)
	err := grpc.Invoke(ctx, "/kudu.task.TaskService/TodayTasks", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) AddTask(ctx context.Context, in *AddRequest, opts ...grpc.CallOption) (*AddResponse, error) {
	out := new(AddResponse)
	err := grpc.Invoke(ctx, "/kudu.task.TaskService/AddTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *taskServiceClient) RemoveTask(ctx context.Context, in *RemoveRequest, opts ...grpc.CallOption) (*RemoveResponse, error) {
	out := new(RemoveResponse)
	err := grpc.Invoke(ctx, "/kudu.task.TaskService/RemoveTask", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TaskService service

type TaskServiceServer interface {
	TodayTasks(context.Context, *TodayTasksRequest) (*TodayTasksResponse, error)
	AddTask(context.Context, *AddRequest) (*AddResponse, error)
	RemoveTask(context.Context, *RemoveRequest) (*RemoveResponse, error)
}

func RegisterTaskServiceServer(s *grpc.Server, srv TaskServiceServer) {
	s.RegisterService(&_TaskService_serviceDesc, srv)
}

func _TaskService_TodayTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodayTasksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).TodayTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kudu.task.TaskService/TodayTasks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).TodayTasks(ctx, req.(*TodayTasksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_AddTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).AddTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kudu.task.TaskService/AddTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).AddTask(ctx, req.(*AddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TaskService_RemoveTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TaskServiceServer).RemoveTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kudu.task.TaskService/RemoveTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TaskServiceServer).RemoveTask(ctx, req.(*RemoveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TaskService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "kudu.task.TaskService",
	HandlerType: (*TaskServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TodayTasks",
			Handler:    _TaskService_TodayTasks_Handler,
		},
		{
			MethodName: "AddTask",
			Handler:    _TaskService_AddTask_Handler,
		},
		{
			MethodName: "RemoveTask",
			Handler:    _TaskService_RemoveTask_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "task/task.proto",
}

func init() { proto.RegisterFile("task/task.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 509 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x53, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0xf3, 0x9d, 0x89, 0x48, 0xdd, 0x15, 0x54, 0x9b, 0x50, 0x44, 0x64, 0x84, 0x08, 0x1c,
	0x1c, 0x35, 0xdc, 0xb8, 0x99, 0x24, 0x48, 0x51, 0x5a, 0x07, 0xad, 0x1d, 0x90, 0xb8, 0x58, 0x6e,
	0x76, 0x65, 0xa2, 0xc4, 0x76, 0xc8, 0xae, 0x2b, 0xf5, 0xbf, 0xf1, 0x4f, 0xf8, 0x33, 0x68, 0xd7,
	0x71, 0xed, 0x5a, 0x45, 0x42, 0xbd, 0x44, 0x33, 0x6f, 0xde, 0xbc, 0x79, 0x99, 0xf1, 0xc2, 0xa9,
	0xf0, 0xf9, 0x76, 0x24, 0x7f, 0xcc, 0xfd, 0x21, 0x16, 0x31, 0x6a, 0x6f, 0x13, 0x9a, 0x98, 0x12,
	0x30, 0x7e, 0x6b, 0x50, 0x73, 0x7d, 0xbe, 0x45, 0x5d, 0xa8, 0x6c, 0x28, 0xd6, 0x06, 0xda, 0xb0,
	0x4d, 0x2a, 0x1b, 0x8a, 0x5e, 0x42, 0x5b, 0x12, 0xbc, 0xc8, 0x0f, 0x19, 0xae, 0x28, 0xb8, 0x25,
	0x01, 0xdb, 0x0f, 0x19, 0xd2, 0xa1, 0x9a, 0x1c, 0x76, 0xb8, 0xaa, 0x60, 0x19, 0x22, 0x04, 0x35,
	0xe1, 0x07, 0x1c, 0xd7, 0x14, 0xa4, 0x62, 0xf4, 0x1c, 0xea, 0x51, 0x2c, 0x18, 0xc7, 0x75, 0x05,
	0xa6, 0x09, 0xea, 0x41, 0x4b, 0x05, 0x5e, 0x48, 0x71, 0x43, 0x15, 0x9a, 0x2a, 0xbf, 0xa6, 0x52,
	0x84, 0xfa, 0x82, 0xe1, 0x66, 0x2a, 0x22, 0x63, 0x74, 0x01, 0xed, 0x75, 0x1c, 0xee, 0x77, 0x4c,
	0x30, 0x8a, 0x5b, 0x03, 0x6d, 0xd8, 0x22, 0x39, 0x60, 0x4c, 0xe1, 0xcc, 0x8d, 0xa9, 0x7f, 0x27,
	0xff, 0x02, 0x27, 0xec, 0x57, 0xc2, 0xb8, 0x78, 0x68, 0x5d, 0x2b, 0x59, 0xcf, 0x8c, 0x56, 0x72,
	0xa3, 0x46, 0x04, 0xa8, 0xa8, 0xc2, 0xf7, 0x71, 0xc4, 0x19, 0x7a, 0x0b, 0x75, 0xd9, 0xc5, 0xb1,
	0x36, 0xa8, 0x0e, 0x3b, 0xe3, 0x53, 0xf3, 0x7e, 0x6b, 0xa6, 0x24, 0x92, 0xb4, 0x8a, 0x2e, 0xa1,
	0xc1, 0x85, 0x2f, 0x92, 0x54, 0xb2, 0x3b, 0xee, 0x15, 0x78, 0x99, 0x96, 0xa3, 0x08, 0xe4, 0x48,
	0x34, 0x2e, 0x01, 0x2c, 0x4a, 0x33, 0xbb, 0x6f, 0xa4, 0x23, 0xbe, 0x55, 0x4e, 0x1f, 0x19, 0xa3,
	0x8a, 0xc6, 0x57, 0xe8, 0xa8, 0x96, 0xa3, 0xb7, 0xf2, 0xb5, 0x9e, 0x60, 0xe2, 0x35, 0x3c, 0x23,
	0x2c, 0x8c, 0x6f, 0x59, 0xe6, 0xa3, 0xa4, 0x69, 0x4c, 0xa0, 0x9b, 0x11, 0x8e, 0x53, 0xf3, 0x29,
	0xda, 0x7f, 0x4e, 0xf9, 0x10, 0x49, 0x91, 0x62, 0x05, 0x75, 0xa0, 0xb9, 0xb2, 0x17, 0xf6, 0xf2,
	0xbb, 0xad, 0x9f, 0xc8, 0xc4, 0x59, 0x4d, 0x26, 0x33, 0xc7, 0xd1, 0x35, 0x84, 0xa0, 0x3b, 0xb7,
	0xdd, 0x19, 0xb1, 0xad, 0x2b, 0x6f, 0x46, 0xc8, 0x92, 0xe8, 0x15, 0xd4, 0x87, 0x73, 0xd7, 0x72,
	0x16, 0xde, 0xdc, 0xfe, 0x66, 0x5d, 0xcd, 0xa7, 0x9e, 0x4a, 0x6c, 0xeb, 0x7a, 0xa6, 0xeb, 0x92,
	0x9f, 0xa6, 0x4b, 0xd7, 0xfb, 0xb2, 0x5c, 0xd9, 0x53, 0xfd, 0x6c, 0xfc, 0x47, 0x83, 0x8e, 0x5c,
	0x9b, 0xc3, 0x0e, 0xb7, 0x9b, 0x35, 0x43, 0x0b, 0x80, 0xfc, 0xb4, 0xe8, 0xa2, 0xb8, 0xdc, 0xf2,
	0x77, 0xd3, 0x7f, 0xf5, 0x8f, 0x6a, 0x6a, 0xdf, 0x38, 0x41, 0x9f, 0xa0, 0x69, 0x51, 0xaa, 0x9e,
	0xcb, 0x8b, 0x02, 0x37, 0xbf, 0x65, 0xff, 0xbc, 0x0c, 0xdf, 0xf7, 0x4e, 0x00, 0xd2, 0x6d, 0xaa,
	0x76, 0xfc, 0x60, 0x73, 0x85, 0x2b, 0xf4, 0x7b, 0x8f, 0x54, 0x32, 0x91, 0xcf, 0xef, 0x7f, 0xbc,
	0x0b, 0x36, 0xe2, 0x67, 0x72, 0x63, 0xae, 0xe3, 0x70, 0xc4, 0xef, 0x22, 0xe9, 0x72, 0x14, 0xc4,
	0x3b, 0x3f, 0x0a, 0x46, 0xea, 0x6d, 0x07, 0x2c, 0x52, 0x2f, 0xfd, 0xa6, 0xa1, 0xd2, 0x8f, 0x7f,
	0x03, 0x00, 0x00, 0xff, 0xff, 0x91, 0x8a, 0x5e, 0x3d, 0xfd, 0x03, 0x00, 0x00,
}
